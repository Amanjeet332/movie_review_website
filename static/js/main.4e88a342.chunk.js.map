{"version":3,"sources":["context.js","Search.js","Review.js","Home.js","SingleMovie.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","API_KEY","process","AppState","children","useState","movie","setMovie","isLoading","setisLoading","show","msg","isError","setisError","query","setQuery","getMovies","url","fetch","res","json","data","console","log","Response","Search","Error","useEffect","Timer","setTimeout","clearTimeout","Provider","value","useContext","className","action","onSubmit","e","preventDefault","type","placeholder","onChange","target","Review","map","x","Title","Poster","imdbID","to","length","substring","src","alt","Home","SingleMovie","imbdId","useParams","Released","Genre","imdbRating","Country","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4e88a342.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\r\n\r\nconst AppContext =createContext()\r\nexport const API_KEY=`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\r\nconst AppState = ({children}) => {\r\n\r\n//export const API_KEY=`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\r\n //http://www.omdbapi.com/?apikey=7761dbb7\r\nconst [movie, setMovie] = useState([])\r\nconst [isLoading, setisLoading] = useState(true)\r\nconst [isError, setisError] = useState({show:false,msg:''})\r\nconst [query, setQuery] = useState('titanic')\r\n\r\nconst getMovies=async(url)=>{\r\n  setisLoading(true)\r\n  try{\r\n  let res= await fetch(url)\r\n  let data= await res.json()\r\n  console.log(data)\r\n  if(data.Response==='True'){                  // data.Response is coming from api call result\r\n    setisLoading(false)                        // setting loading is false as we get the result\r\n    setisError({\r\n      show:false})\r\n     setMovie(data.Search)                     // data.search is the array we are getting after the search made.\r\n  }\r\n  else{\r\n    setisLoading(false)  \r\n    setisError({\r\n      show:true,\r\n      msg:data.Error\r\n    })\r\n  }\r\n  }\r\n  catch(err){\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nuseEffect(() => {\r\n  let Timer\r\n \r\n//if(Timer) clearTimeout(Timer)\r\n    Timer=setTimeout(() => {\r\n      getMovies(`${API_KEY}&s=${query}`)\r\n    }, 2000);\r\n   \r\n    return ()=>clearTimeout(Timer)\r\n}, [query]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n  return (\r\n    <AppContext.Provider value={{movie,isError,isLoading,query,setQuery,setisLoading,setMovie,setisError}}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\n\r\nexport  {AppState,AppContext} ","import React, { useContext } from 'react'\r\nimport { AppContext } from './context'\r\n\r\nconst Search = () => {\r\n  const {query, setQuery, isError}= useContext(AppContext)\r\n\r\n\r\n  return (<>\r\n  <section className='search-section'>\r\n    <h2>Search your fav below</h2>\r\n    <form action='#' onSubmit={(e)=>e.preventDefault()}>\r\n      <input\r\n       type=\"text\"\r\n       placeholder='Search Here' \r\n       value={query} \r\n       onChange={(e)=>setQuery(e.target.value)}\r\n       />\r\n    </form>\r\n    <div className=\"card-error\">\r\n      <p>{isError.show && isError.msg}</p>\r\n    </div>\r\n\r\n  </section>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default Search","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"./context\";\r\nimport './App.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Review = () => {\r\n  const { movie ,isLoading} = useContext(AppContext);\r\n  if (isLoading) {\r\n\r\n    return( \r\n      <div className=\"loading\">Loading....</div>\r\n   )\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"movie-page\">\r\n        <div className=\"grid grid-4-col\" >\r\n          {movie.map((x) => {\r\n            const {Title,Poster,imdbID} =x;   // destructuring and fetching details out of single element of movie array\r\n            return (                          //map function returning value by putting info in card \r\n            // while sending title we have used condition to add '...' if title lenght in more than 20\r\n           <NavLink to={`/SingleMovie/${imdbID}`} >\r\n              <div className=\"className card\"  key={imdbID}>\r\n                <div className=\"className card-info\" key={imdbID}>\r\n                  <h2>{Title.length >= 20 ? `${Title.substring(0,20)}...`:Title.substring(0,20)}</h2>           \r\n                  \r\n                  <img src={Poster} alt={Title}\r\n                   />\r\n                </div>\r\n              </div>\r\n             </NavLink> // above Navlink is linking each search result to /SingleMOvie cpmponent \r\n                        // and alongsdie sending imbdID to that component which is recieved in app.js with params to url\r\n                        // we are using that recieved param using useParams from ract-router-Dom\r\n            )\r\n          })}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Review;\r\n","import React from 'react'\r\nimport Search from './Search'\r\nimport Review from './Review'\r\n\r\nconst Home = () => {\r\n\r\n  return (\r\n    <>\r\n     <div><Search/></div>\r\n      <div><Review/></div>\r\n     \r\n    \r\n     \r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home","import React, { useEffect ,useState}  from \"react\";\r\nimport { useParams,NavLink} from \"react-router-dom\";\r\nimport { API_KEY} from \"./context\";\r\n\r\n\r\nconst SingleMovie = () => {\r\nconst {imbdId} =useParams()\r\n  const [movie, setMovie] = useState('')\r\nconst [isLoading, setisLoading] = useState(true)\r\n// const {movie,setMovie,isLoading,setisLoading}= useContext(AppContext)\r\n\r\nconst getMovies=async(url)=>{\r\n  setisLoading(true)\r\n  try{\r\n  let res= await fetch(url)\r\n  let data= await res.json()\r\n  console.log(data)\r\n  if(data.Response==='True'){                  // data.Response is coming from api call result\r\n    setisLoading(false)                        // setting loading is false as we get the result\r\n    // setisError({\r\n    //   show:false})\r\n     setMovie(data)                     // data.search is the array we are getting after the search made.\r\n  }\r\n  else{\r\n    setisLoading(false)  \r\n    // setisError({\r\n    //   show:true,\r\n    //   msg:data.Error\r\n    // })\r\n  }\r\n  }\r\n  catch(err){\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nuseEffect(() => {\r\n  let Timer\r\n \r\n//if(Timer) clearTimeout(Timer)\r\n    Timer=setTimeout(() => {\r\n      getMovies(`${API_KEY}&i=${imbdId}`)\r\n    }, 500);\r\n   \r\n    return ()=>clearTimeout(Timer)\r\n}, [imbdId]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\nif (isLoading) {\r\n\r\n  return( \r\n    <div className=\"movie-section\"> \r\n    <div className=\"loading\">Loading....</div>\r\n    </div>\r\n   \r\n )\r\n}\r\n  return (\r\n    <>\r\n      <div className=\"movie-section\">\r\n        <div className=\"movie-card\">\r\n          <figure>\r\n            <img src={movie.Poster} alt=\"\" />\r\n          </figure>\r\n          <div className=\"card-content\">\r\n            <p className=\"title\">{movie.Title}</p>\r\n            <p className=\"card-text\">{movie.Released}</p>\r\n            <p className=\"card-text\">{movie.Genre}</p>\r\n            <p className=\"card-text\">{movie.imdbRating}</p>\r\n            <p className=\"card-text\">{movie.Country}</p>\r\n            <NavLink to='/home' className='back-btn'>Go Back</NavLink>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleMovie","import React from 'react'\nimport Home from './Home'\nimport {Routes, Route } from 'react-router-dom'\nimport { AppState } from './context'\nimport './App.css'\nimport SingleMovie from './SingleMovie'\n\nconst App = () => {\n  return (\n    <>\n   <AppState>\n      <Routes>\n        <Route path='/SingleMovie/:imbdId' element={<SingleMovie/>}/>\n        <Route path='/home' element={<Home/>}/>\n        <Route path='/' element={<Home/>}/>\n      </Routes>\n   \n      </AppState>\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n     <Router>\n    <App />\n    </Router>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}